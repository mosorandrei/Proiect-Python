"""
The user should run this script with one parameter : the database you want to work with 
"""
import math
import random
import os
import time
import sys
import cx_Oracle
import mysql.connector
import Encryption as Enc


def add(params, conn, database):
    """
    A function to handle the Add feature, which takes as a parameter the list of strings provided by the user and
    encrypts the content of the file with the name of the last string given, creates a new file with the encrypted
    content, in the EncryptedFiles folder, and then deletes the original file. The function also adds the metadata
    of the file in a database, along with the public key generated by the RSA algorithm.
    :param database: the name of the database
    :param conn: the connection to the database
    :param params: the command provided by the user
    """

    p = Enc.generate_large_prime()
    q = Enc.generate_large_prime()
    n = p * q
    phi = (p - 1) * (q - 1)

    e = random.randint(2, 2 ** 32)
    while True:
        if Enc.gcd(phi, e) == 1 and e < phi:  # phi and e must be co-prime and e < phi
            break
        e = random.randint(2, 2 ** 32)

    d = Enc.modular_multiplicative_inverse(e, phi)

    print(d)  # here we print the private key only for testing purposes

    ciphertext = ""

    if os.path.exists(params[1]):
        file = open(params[1], "r")
        plain_text = file.read()
        file.close()
        if len(plain_text) % 4 != 0:  # we split the text in word with size 4 and encrypt these words, so we need a pad
            for i in range(4 - (len(plain_text) % 4)):
                plain_text = plain_text + " "

        for i in range(0, len(plain_text), 4):
            part = plain_text[i:i + 4]
            int_plain_text = int.from_bytes(part.encode(), byteorder='little')
            encrypted_text = pow(int_plain_text, e, n)
            ciphertext = ciphertext + str(encrypted_text) + "\n"

        add_counter = random.randint(0, 1000)
        cr = conn.cursor()
        cr.execute('select * from filedatabase')

        ok = 1
        while ok == 1:
            ok = 0
            for r in cr:
                if r[0] == add_counter:  # the file_id should be unique
                    add_counter = random.randint(0, 1000)
                    ok = 1

        encrypted_file = open("EncryptedFiles\\file" + str(add_counter) + ".txt", "w")
        encrypted_file.write(ciphertext)

        encrypted_file.close()

    else:
        print("The file you specified is not in the current directory! Please move it into the current directory "
              "and try again")
        return

    name, extension = os.path.splitext(params[1])
    c_enc = conn.cursor()
    if database == "MySQL":
        sql = 'insert into filedatabase(file_id,file_name,file_type,file_size,file_created,file_modified,file_accessed,' \
            'public_key,product_prime) ' \
            'values (%s, %s, %s, %s, %s, %s, %s, %s, %s)'
    else:
        sql = 'insert into filedatabase(file_id,file_name,file_type,file_size,file_created,file_modified,' \
                    'file_accessed, public_key,product_prime) ' \
                    'values (:f_id, :f_name, :f_type, :f_size, :f_created, :f_modified, :f_accessed,:f_public_key ,' \
                    ' :f_product_prime)'
    c_enc.execute(sql, [add_counter, str(name), str(extension), str(os.path.getsize(params[1])),
                        str(time.ctime(os.path.getctime(params[1]))), str(time.ctime(os.path.getmtime(params[1]))),
                        str(time.ctime(os.path.getatime(params[1]))), str(e), str(n)])
    conn.commit()

    os.remove(params[1])


def show(params, conn, database):
    """
    A function to handle the Show feature, which takes as a parameter a list of strings provided by the user and, based
    on the private key given to run the RSA algorithm, searches in the database the row with the name of the file and
    decrypts the content of the file associated with that row, then prints the content.
    :param database: the name of the database
    :param conn: the connection to the database
    :param params: the command provided by the user
    """

    print("###")
    print("Careful! In order to decrypt your file properly you must provide the right secret key,"
          "otherwise, you will get a wrong output! ")
    print("###")
    d = int(input("----Enter the secret key: "))

    file_name = params[-1].split(".")[0]
    file_id = ""
    c_dec = conn.cursor()
    if database == "MySQL":
        sql = "select * from filedatabase where file_name = %s"
        c_dec.execute(sql, (file_name,))
    else:
        sql = "select * from filedatabase where file_name = :f_name"
        c_dec.execute(sql, f_name=file_name)

    n = 0

    rows_list = []
    for rand in c_dec:
        file_id = rand[0]
        n = int(rand[-1])
        rows_list.append((rand, n, file_id))

    if len(rows_list) == 0:
        print("The name of the file you requested is not in our database! Please check again the name and try again!")
        return

    if len(rows_list) > 1:
        file_id = int(input("There are multiple files in the database with the name you provided! "
                            "Please provide the id of your file: "))

    ok = 0
    for r in rows_list:
        if r[2] == file_id:
            ok = 1
            rand = r[0]
            n = int(rand[-1])
            print("########################")
            print("The information about your file is:")
            print("The id of the file is : " + str(rand[0]))
            print("The original name of the file is: " + str(rand[1]))
            print("The extension of the file is: " + str(rand[2]))
            print("The size of the file is: " + str(rand[3]))
            print("The creation date is: " + str(rand[4]))
            print("The last modification date is: " + str(rand[5]))
            print("The last access date is: " + str(rand[6]))
            print("The public key is: " + str(rand[7]))
            print("########################")
            break

    if ok == 0:
        print("###")
        print("The id you provided is not in our database! Please try again!")
        print("###")
        return

    try:
        plaint_text = ""
        encrypted_file = open("EncryptedFiles\\file" + str(file_id) + ".txt", "r")
        encrypted_text = encrypted_file.read()
        encrypted_text = encrypted_text.split("\n")
        for i in range(len(encrypted_text) - 1):
            content = pow(int(encrypted_text[i]), d, n)
            length = math.ceil(content.bit_length() / 8)
            plaint_text = plaint_text + content.to_bytes(length, byteorder="little").decode()

        print("The content of the selected file is:")
        print("%%%%%%%%%%%%%%%%%%")
        print(plaint_text)
        print("%%%%%%%%%%%%%%%%%%")

    except UnicodeDecodeError:
        print("You provided a wrong private key! Try again")
        return


def remove(params, conn, database):
    """
    A function to handle the Remove feature, which takes as a parameter a list of strings provided by the user and
    removes from the database the row with the name of the file provided, as well as the corresponding encrypted file
    :param database: the name of the database
    :param conn: the connection to the database
    :param params: the command provided by the user
    """

    file_name = params[-1].split(".")[0]
    file_id = ""

    c_rem = conn.cursor()
    if database == "MySQL":
        sql = "select * from filedatabase where file_name = %s"
        c_rem.execute(sql, (file_name,))
    else:
        sql = "select * from filedatabase where file_name = :f_name"
        c_rem.execute(sql, f_name=file_name)

    rows_list = []
    for rand in c_rem:
        file_id = rand[0]
        rows_list.append(file_id)

    if len(rows_list) == 0:
        print("The name of the file you requested to delete is not in our database!"
              " Please check again the name and try again!")
        return

    if len(rows_list) > 1:
        file_id = int(input("There are multiple files in the database with the name you provided! "
                            "Please provide the id of your file you want to delete"
                            ": "))

    cd = conn.cursor()
    cd.execute('select * from filedatabase')
    ok = 0
    for r in cd:
        if r[0] == file_id:
            ok = 1
            break

    if ok == 0:
        print("###")
        print("The id you provided is not in our database! Please try again!")
        print("###")
        return

    c_rem = conn.cursor()
    if database == "MySQL":
        sql = "delete from filedatabase where file_name = %s and file_id = %s"
        c_rem.execute(sql, (file_name, file_id,))
    else:
        sql = "delete from filedatabase where file_name = :f_name and file_id = :f_id"
        c_rem.execute(sql, f_name=file_name, f_id=file_id)

    conn.commit()

    os.remove("EncryptedFiles\\file" + str(file_id) + ".txt")

    print("The file " + str(params[1]) + " was deleted successfully")


def handle_command(params, connection, database):
    """
    A function to direct the program to the future desired by the user. Using a dictionary, the function passes the name
    of the function provided by the user and calls the function along with the parameters
    :param database: the name of the database
    :param connection: the connection to the database
    :param params: the command provided by the user
    """
    handler = {
        "add": add,
        "show": show,
        "remove": remove
    }
    return handler[params[0]](params, conn, database)


def main_function(connection, database):
    """
    Main function to display the commands and execute them
    :param connection: database connection
    :param database: name of the database
    """
    print("Welcome to Encrypted Database Tool! Type help for getting the instructions about the commands!")
    while 1:
        print("----------")
        command = input('Enter a command: ')

        if command.lower() == "exit":
            break

        if command.lower() == "help":
            f = open("instructions.txt")
            print("----------")
            print(f.read())

        else:

            command = command.split(" ")

            if command[0] != "add" and command[0] != "show" and command[0] != "remove":
                print("Wrong command! Type help to see the commands!")
                continue

            if command[0] == "show" and len(command) != 4:
                print("Wrong syntax of show command! Type help to see the commands!")
                continue

            if (command[0] == "add" or command[0] == "remove") and len(command) != 2:

                if command[0] == "add":
                    print("Wrong syntax of add command! Type help to see the commands!")
                    continue

                if command[0] == "remove":
                    print("Wrong syntax of remove command! Type help to see the commands!")
                    continue

            handle_command(command, connection, database)


if __name__ == "__main__":
    my_database = sys.argv[1]
    if my_database == "Oracle":
        print("Oracle")
        dsn_tns = cx_Oracle.makedsn('localhost',
                                    '1521',
                                    service_name='XE')
        conn = cx_Oracle.connect(user=r'STUDENT',
                                 password='STUDENT',
                                 dsn=dsn_tns)
        c = conn.cursor()
        c.execute('select * from filedatabase')

        for row in c:
            print(row)
    else:
        if my_database == "MySQL":
            print("MySQL")
            conn = mysql.connector.connect(host='localhost',
                                           database='Mysql',
                                           user='root',
                                           password='STUDENT')
            c = conn.cursor()
            c.execute('select * from filedatabase')

            for row in c:
                print(row)

        else:
            if my_database == "Neo4j":
                print("Neo4j")
                raise SystemExit
            else:
                if my_database == "Mongo":
                    print("Mongo")
                    raise SystemExit
                else:
                    conn = None
                    print("We do not have support for this Database")
                    raise SystemExit
    main_function(conn, my_database)
